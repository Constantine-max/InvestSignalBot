import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# üîπ Telegram —Ç–æ–∫–µ–Ω
TOKEN = "6772849489:AAGFvjhVnjfErkHrn5VlNrytUVXxHE8tMqI"

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–ø-100 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å CoinGecko
def get_top_100():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": 100,
        "page": 1,
        "sparkline": False
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    return []

# üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def show_main_menu(update: Update):
    keyboard = [
        [InlineKeyboardButton("üìä –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="top10")],
        [InlineKeyboardButton("üí∞ –¢–æ–ø-50 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="top50")],
        [InlineKeyboardButton("üåç –¢–æ–ø-100 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="top100")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëá",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        try:
            await update.callback_query.message.reply_text(
                "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëá",
                reply_markup=reply_markup
            )
        except:
            pass

# üîπ /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update)

# üîπ /help –∫–æ–º–∞–Ω–¥–∞
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìå –ö–æ–º–∞–Ω–¥—ã CryptoBot:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ç–æ–ø-10, 50 –∏–ª–∏ 100 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
    )
    await update.message.reply_text(text)

# üîπ /info –∫–æ–º–∞–Ω–¥–∞
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "ü§ñ –Ø CryptoBot!\n"
        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    )
    await update.message.reply_text(text)

# üîπ –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    top_n = 10 if data == "top10" else 50 if data == "top50" else 100

    coins = get_top_100()[:top_n]
    message = f"üìà –¢–æ–ø-{top_n} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
    for i, coin in enumerate(coins, start=1):
        message += f"{i}. {coin['name']} ({coin['symbol'].upper()}): ${coin['current_price']}\n"

    try:
        await query.edit_message_text(message)
    except:
        pass

# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ù–∞–∂–º–∏ Ctrl+C, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
    app.run_polling()

if __name__ == "__main__":
    main()